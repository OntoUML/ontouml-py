:py:mod:`ontouml_py.classes.concrete_classes.package`
=====================================================

.. py:module:: ontouml_py.classes.concrete_classes.package

.. autoapi-nested-parse::

   Module for the Package class within an OntoUML model.

   This module defines the Package class, a concrete implementation of the Packageable abstract class. The Package class
   represents a container in the OntoUML model, capable of holding other Packageable elements (here called contents).
   It provides functionalities to add and remove contents, ensuring type safety and maintaining the integrity of the
   model's structure. The class also includes private attributes to manage its contents and configuration settings for
   validation and assignment.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ontouml_py.classes.concrete_classes.package.Package




.. py:class:: Package(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.packageable.Packageable`

   Represents a package in an OntoUML model, extending Packageable.

   A Package is a container for other Packageable contents, providing a way to group and organize these contents
   within the OntoUML model. It supports operations to add and remove contents, ensuring the integrity and consistency
   of the package's contents.

   :ivar _contents: A private set of Packageable contents contained within the package.
   :vartype _contents: set[Packageable]
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:property:: contents
      :type: set[ontouml_py.classes.abstract_classes.packageable.Packageable]

      Provide a read-only view of the package's contents.

      This property is a safeguard to prevent direct modification of the 'contents' set. To add or remove contents,
      use the 'add_content' and 'remove_content' methods. This design ensures that the integrity of the package's
      contents collection is maintained.

      :return: A set of Packageable objects that are part of the package.
      :rtype: set[Packageable]


   .. py:attribute:: _contents
      :type: set[ontouml_py.classes.abstract_classes.packageable.Packageable]

      

   .. py:attribute:: model_config

      

   .. py:method:: add_content(content)

      Add a new content to the package's collection of contents.

      This method ensures that only instances of Packageable or its subclasses are added to the package. It also
      establishes a bidirectional relationship between the package and the content.

      :param content: The Packageable content to be added.
      :type content: Packageable
      :raises TypeError: If the provided content is not an instance of Packageable or if a package attempts to
                         contain itself.


   .. py:method:: remove_content(content)

      Remove an existing content from the package's collection of contents.

      This method ensures that the content to be removed is actually part of the package. It also updates the
      content's 'in_package' attribute to None, effectively breaking the bidirectional relationship.

      :param content: The Packageable content to be removed.
      :type content: Packageable
      :raises TypeError: If the content is not a valid Packageable.
      :raises ValueError: If the content is not part of the package.



