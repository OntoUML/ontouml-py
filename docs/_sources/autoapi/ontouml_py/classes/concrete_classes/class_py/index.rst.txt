:py:mod:`ontouml_py.classes.concrete_classes.class_py`
======================================================

.. py:module:: ontouml_py.classes.concrete_classes.class_py

.. autoapi-nested-parse::

   This module defines classes and functionality for representing and manipulating ontological models.

   It includes the definition of the `Class` class, which is a key component in the ontological model, representing
   ontological classes with various attributes and behaviors. The module also includes definitions for handling literals
   associated with these classes, ensuring that operations on these classes adhere to certain ontological constraints.

   In this library, a `Class` is initialized as an enumeration by providing a list of literals, which are integral to its
   definition. These literals, typically dependent on their classes, represent the finite set of values for enumeration
   instances. To enhance object manipulation flexibility, this library allows the creation of 'free' literals,
   independent of any class. Users can create these literals separately and later insert them into the appropriate
   classes, offering a dynamic approach to class and literal management.
   However, if the a Class's instance is created with stereotype=ClassStereotype.ENUMERATION, a set of stereotypes must
   be provided at init time. I.e., it is not possible to have an enumeration without literals.

   The module is named class_py instead of class due to the fact that class is a reserved keyword in Python.
   As reserved keywords cannot be used as module names, class_py was chosen to maintain clarity and consistency with the
   module's purpose, while avoiding naming conflicts within the Python language."



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ontouml_py.classes.concrete_classes.class_py.Class




.. py:class:: Class(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.classifier.Classifier`

   Represent a class in an ontological model.

   This class extends the Classifier class and includes additional properties and methods specific to
   ontological classes. It supports operations like adding and removing literals, provided the class
   conforms to certain constraints based on its stereotype.

   :ivar is_powertype: Indicates if the class is a powertype.
   :vartype is_powertype: bool
   :ivar order: Represents the order of the class.
   :vartype order: str
   :ivar restricted_to: A set of ontological natures that the class is restricted to.
   :vartype restricted_to: set[OntologicalNature]
   :ivar stereotype: The stereotype of the class.
   :vartype stereotype: ClassStereotype
   :ivar literals: A set of literals associated with the class. Must be managed internally after init.
   :vartype literals: set[Literal]
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: is_powertype
      :type: bool

      

   .. py:attribute:: order
      :type: str

      

   .. py:attribute:: restricted_to
      :type: set[ontouml_py.classes.enumerations.ontologicalnature.OntologicalNature]

      

   .. py:attribute:: stereotype
      :type: ontouml_py.classes.enumerations.classstereotype.ClassStereotype

      

   .. py:attribute:: literals
      :type: set[ontouml_py.classes.concrete_classes.literal.Literal]

      

   .. py:attribute:: model_config

      

   .. py:method:: __validate_class()

      Validate the class based on its literals and stereotype.

      This method performs two checks:
      1. It ensures that only classes with the Enumeration stereotype can have literals.
      2. It ensures that classes with the Enumeration stereotype must have at least one literal.

      :raises ValueError: If the class has literals but does not have an Enumeration stereotype, or if it is an
                          Enumeration class without any literals.


   .. py:method:: add_literal(literal)

      Add a literal to the class.

      :param literal: The literal to be added.
      :type literal: Literal
      :raises ValueError: If the provided object is not of type Literal.


   .. py:method:: remove_literal(literal)

      Remove a literal from the class if it exists.

      :param literal: The literal to be removed.
      :type literal: Literal



