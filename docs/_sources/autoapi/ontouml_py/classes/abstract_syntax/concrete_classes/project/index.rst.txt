:py:mod:`ontouml_py.classes.abstract_syntax.concrete_classes.project`
=====================================================================

.. py:module:: ontouml_py.classes.abstract_syntax.concrete_classes.project

.. autoapi-nested-parse::

   Module for the Project class within an OntoUML model.

   The Project class extends NamedElement to include project-specific details such as bibliographic citations, keywords,
   and landing pages, among others, providing a comprehensive representation of a project's metadata.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ontouml_py.classes.abstract_syntax.concrete_classes.project.Project




.. py:class:: Project(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_syntax.abstract_classes.namedelement.NamedElement`

   A concrete class representing an OntoUML Project, extending the NamedElement class.

   Manages project-related elements such as acronyms, bibliographic citations, keywords, landing pages, and more,
   providing a comprehensive representation of project metadata.

   The 'elements' attribute is implemented as a read-only property to maintain control over the list of elements and
   enforce the inverse relationship with OntoumlElement instances. The actual data is stored in the private attribute
   '_elements', which can be manipulated via add_element and remove_element methods.

   :ivar acronyms: List of acronyms associated with the project. :vartype acronyms: list[str] :ivar
   bibliographic_citations: Bibliographic citations related to the project. :vartype bibliographic_citations: list[str]
   :ivar keywords: Keywords describing the project. :vartype keywords: list[LangString] :ivar landing_pages: URLs to
   landing pages of the project. :vartype landing_pages: list[str] :ivar languages: Languages used in the project.
   :vartype languages: list[str] :ivar namespace: Namespace of the project. Optional. :vartype namespace: Optional[str]
   :ivar sources: Sources of information for the project. :vartype sources: list[str] :ivar access_rights: Information
   about access rights for the project. :vartype access_rights: list[str] :ivar ontology_types: Types of ontologies
   used in the project. :vartype ontology_types: list[str] :ivar themes: Themes associated with the project. :vartype
   themes: list[str] :ivar license: Licensing information of the project. Optional. :vartype license: Optional[str]
   :ivar contexts: Contexts for which the project is designed. :vartype contexts: list[str] :ivar designed_for_task:
   Tasks for which the project is designed. :vartype designed_for_task: list[str] :ivar publisher: Publisher of the
   project. Optional. :vartype publisher: Optional[str]

   .. py:property:: elements
      :type: list[ontouml_py.classes.ontoumlelement.OntoumlElement]

      Provide read-only access to the elements attribute. This is a workaround to prevent direct modification of         the 'elements' list. Modifications should be done using add_element and remove_element methods.

      :return: A list of OntoumlElement objects.
      :rtype: list[OntoumlElement]


   .. py:attribute:: _elements
      :type: list[ontouml_py.classes.ontoumlelement.OntoumlElement]

      

   .. py:attribute:: acronyms
      :type: list[str]

      

   .. py:attribute:: bibliographic_citations
      :type: list[str]

      

   .. py:attribute:: keywords
      :type: list[langstring_lib.langstring.LangString]

      

   .. py:attribute:: landing_pages
      :type: list[str]

      

   .. py:attribute:: languages
      :type: list[str]

      

   .. py:attribute:: namespace
      :type: Optional[str]

      

   .. py:attribute:: sources
      :type: list[str]

      

   .. py:attribute:: access_rights
      :type: list[str]

      

   .. py:attribute:: ontology_types
      :type: list[str]

      

   .. py:attribute:: themes
      :type: list[str]

      

   .. py:attribute:: license
      :type: Optional[str]

      

   .. py:attribute:: contexts
      :type: list[str]

      

   .. py:attribute:: designed_for_task
      :type: list[str]

      

   .. py:attribute:: publisher
      :type: Optional[str]

      

   .. py:attribute:: root_package
      :type: Optional[ontouml_py.classes.abstract_syntax.concrete_classes.package.Package]

      

   .. py:attribute:: model_config

      

   .. py:method:: add_element(element)

      Add an OntoumlElement to the project. Ensures that the element is of the correct type and not a Project         itself. Also updates the inverse relationship in OntoumlElement and checks for duplicates.

      :param element: The OntoumlElement to be added to the project.
      :type element: OntoumlElement
      :raises TypeError: If the element is not an instance of OntoumlElement.


   .. py:method:: remove_element(element)

      Remove an OntoumlElement from the project if it exists. Also updates the inverse relationship in         OntoumlElement.

      :param element: The OntoumlElement to be removed from the project.
      :type element: OntoumlElement
      :raises TypeError: If the element is None.



