:py:mod:`ontouml_py`
====================

.. py:module:: ontouml_py


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   classes/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ontouml_py.Anchor
   ontouml_py.BinaryRelation
   ontouml_py.Class
   ontouml_py.Generalization
   ontouml_py.GeneralizationSet
   ontouml_py.Literal
   ontouml_py.NaryRelation
   ontouml_py.Note
   ontouml_py.Package
   ontouml_py.Project
   ontouml_py.Property
   ontouml_py.Cardinality
   ontouml_py.AggregationKind
   ontouml_py.ClassStereotype
   ontouml_py.OntologicalNature
   ontouml_py.OntologyRepresentationStyle
   ontouml_py.PropertyStereotype
   ontouml_py.RelationStereotype




.. py:class:: Anchor(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.modelelement.ModelElement`

   Represent an anchor in an OntoUML model.

   An anchor is a specialized model element that links a note (note) to another model element (target). It
   extends the ModelElement class, inheriting its attributes and methods, and adds specific relationships to both a
   Note instance and another ModelElement.

   :ivar note: The note that provides additional information or commentary.
   :vartype note: Note
   :ivar target: The model element that is being described or commented on by the note.
   :vartype target: ModelElement

   .. py:attribute:: note
      :type: ontouml_py.classes.concrete_classes.note.Note

      

   .. py:attribute:: target
      :type: ontouml_py.classes.abstract_classes.modelelement.ModelElement

      

   .. py:attribute:: model_config

      


.. py:class:: BinaryRelation(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.relation.Relation`

   Represent a binary relation in an ontological model.

   A binary relation is a type of relation that involves exactly two distinct entities. This class extends the
   `Relation` class and inherits its properties and methods.

   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: model_config

      


.. py:class:: Class(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.classifier.Classifier`

   Represent a class in an ontological model.

   This class extends the Classifier class and includes additional properties and methods specific to
   ontological classes. It supports operations like adding and removing literals, provided the class
   conforms to certain constraints based on its stereotype.

   :ivar is_powertype: Indicates if the class is a powertype.
   :vartype is_powertype: bool
   :ivar order: Represents the order of the class.
   :vartype order: str
   :ivar restricted_to: A set of ontological natures that the class is restricted to.
   :vartype restricted_to: set[OntologicalNature]
   :ivar stereotype: The stereotype of the class.
   :vartype stereotype: ClassStereotype
   :ivar literals: A set of literals associated with the class. Must be managed internally after init.
   :vartype literals: set[Literal]
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: is_powertype
      :type: bool

      

   .. py:attribute:: order
      :type: str

      

   .. py:attribute:: restricted_to
      :type: set[ontouml_py.classes.enumerations.ontologicalnature.OntologicalNature]

      

   .. py:attribute:: stereotype
      :type: ontouml_py.classes.enumerations.classstereotype.ClassStereotype

      

   .. py:attribute:: literals
      :type: set[ontouml_py.classes.concrete_classes.literal.Literal]

      

   .. py:attribute:: model_config

      

   .. py:method:: __validate_class()

      Validate the class based on its literals and stereotype.

      This method performs two checks:
      1. It ensures that only classes with the Enumeration stereotype can have literals.
      2. It ensures that classes with the Enumeration stereotype must have at least one literal.

      :raises ValueError: If the class has literals but does not have an Enumeration stereotype, or if it is an
                          Enumeration class without any literals.


   .. py:method:: add_literal(literal)

      Add a literal to the class.

      :param literal: The literal to be added.
      :type literal: Literal
      :raises ValueError: If the provided object is not of type Literal.


   .. py:method:: remove_literal(literal)

      Remove a literal from the class if it exists.

      :param literal: The literal to be removed.
      :type literal: Literal



.. py:class:: Generalization(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.modelelement.ModelElement`

   Represent a generalization relationship between two classifiers in an ontological model.

   This class extends `ModelElement` and is used to define a generalization, where one classifier (the general) is
   a generalization of another classifier (the specific).

   :ivar general: The general classifier in the generalization relationship.
   :vartype general: Classifier
   :ivar specific: The specific classifier in the generalization relationship.
   :vartype specific: Classifier
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: general
      :type: ontouml_py.classes.abstract_classes.classifier.Classifier

      

   .. py:attribute:: specific
      :type: ontouml_py.classes.abstract_classes.classifier.Classifier

      

   .. py:attribute:: model_config

      

   .. py:method:: __ensure_irreflexive()

      Validate that the generalization relationship is irreflexive.

      Ensures that the 'general' and 'specific' classifiers are different, as a classifier cannot generalize itself.

      :raises ValueError: If 'general' and 'specific' classifiers are the same.



.. py:class:: GeneralizationSet(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.modelelement.ModelElement`

   Represent a set of generalizations in an ontological model, extending the ModelElement class.

   A GeneralizationSet is a collection of Generalization instances, typically used to represent
   disjointness and completeness constraints in a model.

   :ivar is_disjoint: Indicates if the generalizations in the set are disjoint.
   :vartype is_disjoint: bool
   :ivar is_complete: Indicates if the generalizations in the set are complete.
   :vartype is_complete: bool
   :ivar generalizations: A set of Generalization instances included in this generalization set.
   :vartype generalizations: Set[Generalization]
   :ivar categorizer: An optional Class instance that categorizes the generalization set.
   :vartype categorizer: Optional[Class]
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: is_disjoint
      :type: bool

      

   .. py:attribute:: is_complete
      :type: bool

      

   .. py:attribute:: generalizations
      :type: set[object]

      

   .. py:attribute:: categorizer
      :type: Optional[object]

      

   .. py:attribute:: model_config

      

   .. py:method:: __ensure_generalizations_type(checked_set)
      :classmethod:


   .. py:method:: __ensure_categorizer_type(checked_value)
      :classmethod:


   .. py:method:: __validate_generalization_set()



.. py:class:: Literal(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.modelelement.ModelElement`

   Represent a literal in an ontological model, extending the ModelElement class.

   This class is designed to represent literals, which are specific values or identifiers in an enumeration.

   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: model_config

      


.. py:class:: NaryRelation(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.relation.Relation`

   Represent an n-ary relation in an ontological model.

   An n-ary relation is a type of relation that involves more than two entities. This class extends the `Relation`
   class and inherits its properties and methods.

   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: model_config

      


.. py:class:: Note(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.modelelement.ModelElement`

   Represents a note in an OntoUML model.

   A note is a specialized model element that contains textual information. It extends the ModelElement class,
   inheriting its attributes and methods, and adds a specific attribute for text content using the LangString type.

   :ivar text: The textual content of the note.
   :vartype text: LangString
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: text
      :type: langstring.LangString

      

   .. py:attribute:: model_config

      


.. py:class:: Package(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.packageable.Packageable`

   Represents a package in an OntoUML model, extending Packageable.

   A Package is a container for other Packageable contents, providing a way to group and organize these contents
   within the OntoUML model. It supports operations to add and remove contents, ensuring the integrity and consistency
   of the package's contents.

   :ivar _contents: A private set of Packageable contents contained within the package.
   :vartype _contents: set[Packageable]
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:property:: contents
      :type: set[ontouml_py.classes.abstract_classes.packageable.Packageable]

      Provide a read-only view of the package's contents.

      This property is a safeguard to prevent direct modification of the 'contents' set. To add or remove contents,
      use the 'add_content' and 'remove_content' methods. This design ensures that the integrity of the package's
      contents collection is maintained.

      :return: A set of Packageable objects that are part of the package.
      :rtype: set[Packageable]


   .. py:attribute:: _contents
      :type: set[ontouml_py.classes.abstract_classes.packageable.Packageable]

      

   .. py:attribute:: model_config

      

   .. py:method:: add_content(content)

      Add a new content to the package's collection of contents.

      This method ensures that only instances of Packageable or its subclasses are added to the package. It also
      establishes a bidirectional relationship between the package and the content.

      :param content: The Packageable content to be added.
      :type content: Packageable
      :raises TypeError: If the provided content is not an instance of Packageable or if a package attempts to
                         contain itself.


   .. py:method:: remove_content(content)

      Remove an existing content from the package's collection of contents.

      This method ensures that the content to be removed is actually part of the package. It also updates the
      content's 'in_package' attribute to None, effectively breaking the bidirectional relationship.

      :param content: The Packageable content to be removed.
      :type content: Packageable
      :raises TypeError: If the content is not a valid Packageable.
      :raises ValueError: If the content is not part of the package.



.. py:class:: Project(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.namedelement.NamedElement`

   Represent an OntoUML Project, extending NamedElement with additional project-specific metadata.

   This class encapsulates various aspects of a project, such as acronyms, bibliographic citations, keywords,
   landing pages, and more. It provides a structured way to represent and access these details. The 'elements'
   attribute, which holds the project elements, is managed through specific methods to ensure integrity and
   consistency of the project's structure.

   :ivar acronyms: A set of acronyms associated with the project, aiding in its identification and reference.
   :vartype acronyms: set[str]
   :ivar bibliographic_citations: A collection of bibliographic citations that reference/are relevant to the project
   :vartype bibliographic_citations: set[str]
   :ivar keywords: Descriptive keywords that encapsulate the essence and focus areas of the project.
   :vartype keywords: set[str]
   :ivar landing_pages: URLs pointing to web pages that provide an entry point or overview of the project.
   :vartype landing_pages: set[str]
   :ivar languages: The set of languages that are used or supported within the scope of the project.
   :vartype languages: set[str]
   :ivar namespace: An optional namespace that provides a unique context for the project's elements.
   :vartype namespace: Optional[str]
   :ivar sources: A set of sources or references that have contributed information to the project.
   :vartype sources: set[str]
   :ivar access_rights: Information detailing the access rights and restrictions associated with the project.
   :vartype access_rights: set[str]
   :ivar ontology_types: The types of ontologies that are utilized or represented in the project.
   :vartype ontology_types: set[str]
   :ivar themes: Themes or topics that are central or relevant to the project's objectives and content.
   :vartype themes: set[str]
   :ivar license: Optional licensing information, specifying the legal usage terms of the project's outputs.
   :vartype license: Optional[str]
   :ivar contexts: The contexts or environments for which the project is specifically designed.
   :vartype contexts: set[str]
   :ivar designed_for_task: A set of tasks or objectives that the project is intended to address or facilitate.
   :vartype designed_for_task: set[str]
   :ivar publisher: The entity responsible for publishing or disseminating the project, optional.
   :vartype publisher: Optional[str]
   :ivar root_package: The root package of the project, serving as the entry point for the project's structure.
   :vartype root_package: Optional[Package]
   :ivar representation_style: The style or methodology used for representing the ontologies within the project.
   :vartype representation_style: OntologyRepresentationStyle
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:property:: elements
      :type: set[ontouml_py.classes.abstract_classes.projectelement.ProjectElement]

      Provide a read-only view of the project's elements.

      This property is a safeguard to prevent direct modification of the 'elements' set. To add or remove elements,
      use the 'add_element' and 'remove_element' methods. This design ensures that the integrity of the project's
      elements collection is maintained.

      :return: A set of ProjectElement objects that are part of the project.
      :rtype: set[ProjectElement]


   .. py:attribute:: _elements
      :type: set[ontouml_py.classes.abstract_classes.projectelement.ProjectElement]

      

   .. py:attribute:: acronyms
      :type: set[str]

      

   .. py:attribute:: bibliographic_citations
      :type: set[str]

      

   .. py:attribute:: keywords
      :type: set[str]

      

   .. py:attribute:: landing_pages
      :type: set[str]

      

   .. py:attribute:: languages
      :type: set[str]

      

   .. py:attribute:: namespace
      :type: Optional[str]

      

   .. py:attribute:: sources
      :type: set[str]

      

   .. py:attribute:: access_rights
      :type: set[str]

      

   .. py:attribute:: ontology_types
      :type: set[str]

      

   .. py:attribute:: themes
      :type: set[str]

      

   .. py:attribute:: license
      :type: Optional[str]

      

   .. py:attribute:: contexts
      :type: set[str]

      

   .. py:attribute:: designed_for_task
      :type: set[str]

      

   .. py:attribute:: publisher
      :type: Optional[str]

      

   .. py:attribute:: root_package
      :type: Optional[ontouml_py.classes.concrete_classes.package.Package]

      

   .. py:attribute:: representation_style
      :type: ontouml_py.classes.enumerations.ontologyrepresentationstyle.OntologyRepresentationStyle

      

   .. py:attribute:: model_config

      

   .. py:method:: __setattr__(key, value)

      Override the default attribute setting behavior to include validation for 'root_package'.

      This method intercepts the setting of the 'root_package' attribute to ensure that the assigned package is
      a part of the project's elements. If the validation fails, a ValueError is raised.

      :param key: The name of the attribute to be set.
      :param value: The value to be assigned to the attribute.
      :type key: str
      :type value: Any
      :raises ValueError: If 'root_package' is set to a package not in the project's elements.


   .. py:method:: __ensure_non_empty(checked_values, checked_field)
      :classmethod:

      Validate that the provided list does not contain empty strings.

      This method checks each element in the specified list to ensure that it does not contain any empty strings.
      It is applied to various fields in the Project class, such as 'acronyms', 'bibliographic_citations',
      'keywords', etc. If an empty string is found, a ValueError is raised with a detailed error message indicating
      the specific field affected.

      :param checked_values: The list of strings to be validated.
      :type checked_values: set[str]
      :param checked_field: Information about the field being validated, including the field name.
      :type checked_field: ValidationInfo
      :return: The validated list, ensuring no empty strings are present.
      :rtype: set[str]
      :raises ValueError: If any element in the list is an empty string, specifying the field where it occurred.


   .. py:method:: __validate_root_package(package)

      Validate if the provided package is a valid root package for the project.

      This method performs two checks:
      1. It verifies that the provided package is of the correct type (Package).
      2. It checks if the specified package is included in the project's elements set, ensuring it is a valid and
      integral part of the project's structure.

      :param package: The package to be validated as the root package of the project.
      :type package: Optional[Package]
      :raises TypeError: If the provided object is not of type Package.
      :raises ValueError: If the package is not included in the project's elements or is not a valid Package instance.


   .. py:method:: add_element(element)

      Add a new element to the project's collection of elements.

      This method ensures that only instances of ProjectElement or its subclasses are added to the project. It also
      establishes a bidirectional relationship between the project and the element by setting the element's
      'in_project' attribute to this project instance.

      :param element: The ProjectElement to be added.
      :type element: ProjectElement
      :raises TypeError: If the provided element is not an instance of ProjectElement.


   .. py:method:: remove_element(element)

      Remove an existing element from the project's collection of elements.

      This method ensures that the element to be removed is actually part of the project. It also updates the
      element's 'in_project' attribute to None, effectively breaking the bidirectional relationship.

      :param element: The ProjectElement to be removed.
      :type element: ProjectElement
      :raises TypeError: If the element is not a valid ProjectElement.
      :raises ValueError: If the element is not part of the project.



.. py:class:: Property(**data)


   Bases: :py:obj:`ontouml_py.classes.abstract_classes.decoratable.Decoratable`

   Represent a property in an OntoUML model.

   This class extends Decoratable and includes additional attributes to define the characteristics of a property
   within an OntoUML model. It represents a feature of a Classifier and includes attributes to specify its
   characteristics such as read-only status, aggregation kind, stereotype, cardinality, type, and relationships with
   other properties.

   :ivar is_read_only: Indicates if the property is read-only.
   :vartype is_read_only: bool
   :ivar aggregation_kind: Specifies the aggregation kind of the property.
   :vartype aggregation_kind: AggregationKind
   :ivar stereotype: The stereotype of the property, if any.
   :vartype stereotype: Optional[PropertyStereotype]
   :ivar cardinality: The cardinality of the property. Must be set during initialization.
   :vartype cardinality: Cardinality
   :ivar property_type: The type of the property, referring to a Classifier.
   :vartype property_type: Optional[Classifier]
   :ivar subsetted_by: A set of properties that are subsetted by this property.
   :vartype subsetted_by: Set[Property]
   :ivar redefined_by: A set of properties that are redefined by this property.
   :vartype redefined_by: Set[Property]
   :ivar property_of: Reference to the Classifier instance that owns this property. This is a private attribute.
   :vartype property_of: Optional[Classifier]
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:property:: property_of
      :type: Optional[object]

      Get the owning classifier of this property.

      :return: The Classifier instance that owns this property, if any.
      :rtype: Optional[Classifier]


   .. py:attribute:: _property_of
      :type: Optional[object]

      

   .. py:attribute:: is_read_only
      :type: bool

      

   .. py:attribute:: aggregation_kind
      :type: ontouml_py.classes.enumerations.aggregationkind.AggregationKind

      

   .. py:attribute:: stereotype
      :type: Optional[ontouml_py.classes.enumerations.propertystereotype.PropertyStereotype]

      

   .. py:attribute:: cardinality
      :type: object

      

   .. py:attribute:: property_type
      :type: Optional[object]

      

   .. py:attribute:: subsetted_by
      :type: set[Property]

      

   .. py:attribute:: redefined_by
      :type: set[Property]

      

   .. py:attribute:: model_config

      

   .. py:method:: __validate_cardinality_type(checked_value)
      :classmethod:

      Validate the type of the cardinality attribute.

      Ensures that the cardinality attribute is of type Cardinality. Raises a TypeError if the check fails.

      :param checked_value: The value to be checked.
      :type checked_value: Cardinality
      :return: The checked value if validation is successful.
      :rtype: Cardinality
      :raises TypeError: If the cardinality value is not of type Cardinality.


   .. py:method:: __set_property_of(owner)

      Set the owning classifier of this property.

      :param owner: The Classifier instance to be set as the owner of this property.
      :type owner: Optional[Classifier]



.. py:class:: Cardinality(**data)


   Bases: :py:obj:`pydantic.BaseModel`

   A class representing the cardinality constraints in a data model.

   This class allows for the specification and validation of lower and upper bounds of cardinality,
   along with properties indicating whether the elements are ordered and unique.

   :ivar lower_bound: The lower bound of the cardinality, either a non-negative integer as a string or '*'.     Defaults to None.
   :vartype lower_bound: Optional[str]
   :ivar upper_bound: The upper bound of the cardinality, either a non-negative integer as a string or '*'.     Defaults to None.
   :vartype upper_bound: Optional[str]
   :ivar is_ordered: Flag indicating if the elements are ordered. Defaults to False.
   :vartype is_ordered: bool
   :ivar is_unique: Flag indicating if the elements are unique. Defaults to True.
   :vartype is_unique: bool
   :cvar model_config: Configuration settings for the Pydantic model.
   :vartype model_config: Dict[str, Any]

   .. py:attribute:: lower_bound
      :type: Optional[Union[str, int]]

      

   .. py:attribute:: upper_bound
      :type: Optional[Union[str, int]]

      

   .. py:attribute:: is_ordered
      :type: bool

      

   .. py:attribute:: is_unique
      :type: bool

      

   .. py:attribute:: model_config

      

   .. py:method:: __ensure_valid_multiplicity()

      Validate the cardinality ensuring the lower and upper bounds are synchronized and valid.

      This method checks for the logical consistency of the lower and upper bounds of the cardinality.
      It ensures that the values are either integers or '*', and that the lower bound is not greater than the upper
      bound. It raises a ValueError if the bounds are not valid, logically inconsistent, or if empty strings are
      provided.

      :raises ValueError: If the cardinality values do not follow the defined rules or if empty strings are used.



.. py:class:: AggregationKind(*args, **kwds)


   Bases: :py:obj:`ontouml_py.classes.enumerations.ontouml_enum.OntoumlEnum`

   An enumeration representing different kinds of aggregation in OntoUML.

   This enum classifies the kinds of aggregation relationships that can exist in an OntoUML model. It extends
   OntoumlEnum.

   Members:
       NONE: Represents no aggregation.
       COMPOSITE: Represents a composite aggregation.
       SHARED: Represents a shared aggregation.

   .. py:attribute:: NONE
      :value: 'none'

      

   .. py:attribute:: COMPOSITE
      :value: 'composite'

      

   .. py:attribute:: SHARED
      :value: 'shared'

      


.. py:class:: ClassStereotype(*args, **kwds)


   Bases: :py:obj:`ontouml_py.classes.enumerations.ontouml_enum.OntoumlEnum`

   An enumeration representing different stereotypes applicable to classes in OntoUML.

   This enum classifies various stereotypes that can be assigned to class elements in an OntoUML model. It extends
   OntoumlEnum to leverage automatic CamelCase conversion of member names.

   Members:
       ABSTRACT: Represents an abstract stereotype.
       CATEGORY: Represents a category stereotype.
       COLLECTIVE: Represents a collective stereotype.
       DATATYPE: Represents a datatype stereotype.
       ENUMERATION: Represents an enumeration stereotype.
       EVENT: Represents an event stereotype.
       HISTORICAL_ROLE: Represents a historical role stereotype.
       HISTORICAL_ROLE_MIXIN: Represents a historical role mixin stereotype.
       KIND: Represents a kind stereotype.
       MIXIN: Represents a mixin stereotype.
       MODE: Represents a mode stereotype.
       PHASE: Represents a phase stereotype.
       PHASE_MIXIN: Represents a phase mixin stereotype.
       QUALITY: Represents a quality stereotype.
       QUANTITY: Represents a quantity stereotype.
       RELATOR: Represents a relator stereotype.
       ROLE: Represents a role stereotype.
       ROLE_MIXIN: Represents a role mixin stereotype.
       SITUATION: Represents a situation stereotype.
       SUB_KIND: Represents a sub-kind stereotype.
       TYPE: Represents a type stereotype.

   Each member of this enum is automatically converted to CamelCase format upon initialization.

   Methods:
       __init__: Initializes a new member of the ClassStereotype enum.

   .. py:attribute:: ABSTRACT
      :value: 'abstract'

      

   .. py:attribute:: CATEGORY
      :value: 'category'

      

   .. py:attribute:: COLLECTIVE
      :value: 'collective'

      

   .. py:attribute:: DATATYPE
      :value: 'datatype'

      

   .. py:attribute:: ENUMERATION
      :value: 'enumeration'

      

   .. py:attribute:: EVENT
      :value: 'event'

      

   .. py:attribute:: HISTORICAL_ROLE
      :value: 'historicalRole'

      

   .. py:attribute:: HISTORICAL_ROLE_MIXIN
      :value: 'historicalRoleMixin'

      

   .. py:attribute:: KIND
      :value: 'kind'

      

   .. py:attribute:: MIXIN
      :value: 'mixin'

      

   .. py:attribute:: MODE
      :value: 'mode'

      

   .. py:attribute:: PHASE
      :value: 'phase'

      

   .. py:attribute:: PHASE_MIXIN
      :value: 'phaseMixin'

      

   .. py:attribute:: QUALITY
      :value: 'quality'

      

   .. py:attribute:: QUANTITY
      :value: 'quantity'

      

   .. py:attribute:: RELATOR
      :value: 'relator'

      

   .. py:attribute:: ROLE
      :value: 'role'

      

   .. py:attribute:: ROLE_MIXIN
      :value: 'roleMixin'

      

   .. py:attribute:: SITUATION
      :value: 'situation'

      

   .. py:attribute:: SUBKIND
      :value: 'subkind'

      

   .. py:attribute:: TYPE
      :value: 'type'

      


.. py:class:: OntologicalNature(*args, **kwds)


   Bases: :py:obj:`ontouml_py.classes.enumerations.ontouml_enum.OntoumlEnum`

   An enumeration representing different kinds of ontological natures in OntoUML.

   This enum classifies various ontological natures that can be assigned to elements in an OntoUML model. It extends
   OntoumlEnum.

   Members:
       ABSTRACT_NATURE: Represents an abstract nature.
       COLLECTIVE_NATURE: Represents a collective nature.
       EVENT_NATURE: Represents an event nature.
       EXTRINSIC_MODE_NATURE: Represents an extrinsic mode nature.
       FUNCTIONAL_COMPLEX_NATURE: Represents a functional complex nature.
       INTRINSIC_MODE_NATURE: Represents an intrinsic mode nature.
       QUALITY_NATURE: Represents a quality nature.
       QUANTITY_NATURE: Represents a quantity nature.
       RELATOR_NATURE: Represents a relator nature.
       SITUATION_NATURE: Represents a situation nature.
       TYPE_NATURE: Represents a type nature.

   .. py:attribute:: ABSTRACT_NATURE
      :value: 'abstractNature'

      

   .. py:attribute:: COLLECTIVE_NATURE
      :value: 'collectiveNature'

      

   .. py:attribute:: EVENT_NATURE
      :value: 'eventNature'

      

   .. py:attribute:: EXTRINSIC_MODE_NATURE
      :value: 'extrinsicModeNature'

      

   .. py:attribute:: FUNCTIONAL_COMPLEX_NATURE
      :value: 'functionalComplexNature'

      

   .. py:attribute:: INTRINSIC_MODE_NATURE
      :value: 'intrinsicModeNature'

      

   .. py:attribute:: QUALITY_NATURE
      :value: 'qualityNature'

      

   .. py:attribute:: QUANTITY_NATURE
      :value: 'quantityNature'

      

   .. py:attribute:: RELATOR_NATURE
      :value: 'relatorNature'

      

   .. py:attribute:: SITUATION_NATURE
      :value: 'situationNature'

      

   .. py:attribute:: TYPE_NATURE
      :value: 'typeNature'

      


.. py:class:: OntologyRepresentationStyle(*args, **kwds)


   Bases: :py:obj:`ontouml_py.classes.enumerations.ontouml_enum.OntoumlEnum`

   Enumerates different styles of ontology representation in OntoUML.

   This enumeration class inherits from OntoumlEnum and automatically sets the value of each enum member to a
   CamelCase string corresponding to its name. It provides a clear and standardized way to refer to different ontology
   representation styles.

   :cvar ONTOUML_STYLE: Represents the OntoUML style of ontology representation.
   :vartype ONTOUML_STYLE: str
   :cvar UFO_STYLE: Represents the UFO style of ontology representation.
   :vartype UFO_STYLE: str

   .. py:attribute:: ONTOUML_STYLE
      :value: 'ontoumlStyle'

      

   .. py:attribute:: UFO_STYLE
      :value: 'ufoStyle'

      


.. py:class:: PropertyStereotype(*args, **kwds)


   Bases: :py:obj:`ontouml_py.classes.enumerations.ontouml_enum.OntoumlEnum`

   An enumeration representing different stereotypes applicable to properties in OntoUML.

   This enum classifies various stereotypes that can be assigned to property elements in an OntoUML model. It extends
   OntoumlEnum.

   Members:
       BEGIN: Represents a 'begin' stereotype, typically used for temporal properties.
       END: Represents an 'end' stereotype, often associated with the termination of temporal properties.

   .. py:attribute:: BEGIN
      :value: 'begin'

      

   .. py:attribute:: END
      :value: 'end'

      


.. py:class:: RelationStereotype(*args, **kwds)


   Bases: :py:obj:`ontouml_py.classes.enumerations.ontouml_enum.OntoumlEnum`

   An enumeration representing different stereotypes applicable to relations in OntoUML.

   This enum classifies various stereotypes that can be assigned to relational elements in an OntoUML model. It extends
   OntoumlEnum.

   Members:
       BRINGS_ABOUT: Represents a 'brings about' stereotype.
       CHARACTERIZATION: Represents a characterization stereotype.
       COMPARATIVE: Represents a comparative stereotype.
       COMPONENT_OF: Represents a 'component of' stereotype.
       CREATION: Represents a creation stereotype.
       DERIVATION: Represents a derivation stereotype.
       EXTERNAL_DEPENDENCE: Represents an 'external dependence' stereotype.
       HISTORICAL_DEPENDENCE: Represents a 'historical dependence' stereotype.
       INSTANTIATION: Represents an instantiation stereotype.
       MANIFESTATION: Represents a manifestation stereotype.
       MATERIAL: Represents a material stereotype.
       MEDIATION: Represents a mediation stereotype.
       MEMBER_OF: Represents a 'member of' stereotype.
       PARTICIPATION: Represents a participation stereotype.
       PARTICIPATIONAL: Represents a participational stereotype.
       SUB_COLLECTION_OF: Represents a 'sub-collection of' stereotype.
       SUB_QUANTITY_OF: Represents a 'sub-quantity of' stereotype.
       TERMINATION: Represents a termination stereotype.
       TRIGGERS: Represents a triggers stereotype.

   .. py:attribute:: BRINGS_ABOUT
      :value: 'bringsAbout'

      

   .. py:attribute:: CHARACTERIZATION
      :value: 'characterization'

      

   .. py:attribute:: COMPARATIVE
      :value: 'comparative'

      

   .. py:attribute:: COMPONENT_OF
      :value: 'componentOf'

      

   .. py:attribute:: CREATION
      :value: 'creation'

      

   .. py:attribute:: DERIVATION
      :value: 'derivation'

      

   .. py:attribute:: EXTERNAL_DEPENDENCE
      :value: 'externalDependence'

      

   .. py:attribute:: HISTORICAL_DEPENDENCE
      :value: 'historicalDependence'

      

   .. py:attribute:: INSTANTIATION
      :value: 'instantiation'

      

   .. py:attribute:: MANIFESTATION
      :value: 'manifestation'

      

   .. py:attribute:: MATERIAL
      :value: 'material'

      

   .. py:attribute:: MEDIATION
      :value: 'mediation'

      

   .. py:attribute:: MEMBER_OF
      :value: 'memberOf'

      

   .. py:attribute:: PARTICIPATION
      :value: 'participation'

      

   .. py:attribute:: PARTICIPATIONAL
      :value: 'participational'

      

   .. py:attribute:: SUB_COLLECTION_OF
      :value: 'subCollectionOf'

      

   .. py:attribute:: SUB_QUANTITY_OF
      :value: 'subQuantityOf'

      

   .. py:attribute:: TERMINATION
      :value: 'termination'

      

   .. py:attribute:: TRIGGERS
      :value: 'triggers'

      


