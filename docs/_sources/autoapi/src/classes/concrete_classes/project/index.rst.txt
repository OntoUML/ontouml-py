:py:mod:`src.classes.concrete_classes.project`
==============================================

.. py:module:: src.classes.concrete_classes.project

.. autoapi-nested-parse::

   Module for the Project class within an OntoUML model.

   The Project class extends NamedElement to include project-specific details such as bibliographic citations, keywords,
   and landing pages, among others, providing a comprehensive representation of a project's metadata.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.classes.concrete_classes.project.Project




.. py:class:: Project(**data)


   Bases: :py:obj:`src.classes.abstract_classes.namedelement.NamedElement`

   A concrete class representing an OntoUML Project, extending the NamedElement class.

   Manages project-related elements such as acronyms, bibliographic citations, keywords, landing pages, and more,
   providing a comprehensive representation of project metadata.

   The 'elements' attribute is implemented as a read-only property to maintain control over the list of elements and
   enforce the inverse relationship with OntoumlElement instances. The actual data is stored in the private attribute
   '_elements', which can be manipulated via add_element and remove_element methods.

   :ivar acronyms: List of acronyms associated with the project.
   :vartype acronyms: set[str]
   :ivar bibliographic_citations: Bibliographic citations related to the project.
   :vartype bibliographic_citations: set[str]
   :ivar keywords: Keywords describing the project.
   :vartype keywords: set[str]
   :ivar landing_pages: URLs to landing pages of the project.
   :vartype landing_pages: set[str]
   :ivar languages: Languages used in the project.
   :vartype languages: set[str]
   :ivar namespace: Namespace of the project. Optional.
   :vartype namespace: Optional[str]
   :ivar sources: Sources of information for the project.
   :vartype sources: set[str]
   :ivar access_rights: Information about access rights for the project.
   :vartype access_rights: set[str]
   :ivar ontology_types: Types of ontologies used in the project.
   :vartype ontology_types: set[str]
   :ivar themes: Themes associated with the project.
   :vartype themes: set[str]
   :ivar license: Licensing information of the project. Optional.
   :vartype license: Optional[str]
   :ivar contexts: Contexts for which the project is designed.
   :vartype contexts: set[str]
   :ivar designed_for_task: Tasks for which the project is designed.
   :vartype designed_for_task: set[str]
   :ivar publisher: Publisher of the project. Optional.
   :vartype publisher: Optional[str]
   :ivar root_package: Root package of the project. Optional.
   :vartype root_package: Optional[Package]
   :ivar representation_style: Style of ontology representation used in the project.
   :vartype representation_style: OntologyRepresentationStyle

   .. py:property:: elements
      :type: set[src.classes.abstract_classes.ontoumlelement.OntoumlElement]

      Provide read-only access to the elements attribute.

      This is a workaround to prevent direct modification of the 'elements' list. Modifications should be done using
      add_element and remove_element methods.

      :return: A list of OntoumlElement objects.
      :rtype: set[OntoumlElement]


   .. py:attribute:: _elements
      :type: set[src.classes.abstract_classes.ontoumlelement.OntoumlElement]

      

   .. py:attribute:: acronyms
      :type: set[str]

      

   .. py:attribute:: bibliographic_citations
      :type: set[str]

      

   .. py:attribute:: keywords
      :type: set[str]

      

   .. py:attribute:: landing_pages
      :type: set[str]

      

   .. py:attribute:: languages
      :type: set[str]

      

   .. py:attribute:: namespace
      :type: Optional[str]

      

   .. py:attribute:: sources
      :type: set[str]

      

   .. py:attribute:: access_rights
      :type: set[str]

      

   .. py:attribute:: ontology_types
      :type: set[str]

      

   .. py:attribute:: themes
      :type: set[str]

      

   .. py:attribute:: license
      :type: Optional[str]

      

   .. py:attribute:: contexts
      :type: set[str]

      

   .. py:attribute:: designed_for_task
      :type: set[str]

      

   .. py:attribute:: publisher
      :type: Optional[str]

      

   .. py:attribute:: root_package
      :type: Optional[src.classes.concrete_classes.package.Package]

      

   .. py:attribute:: representation_style
      :type: src.classes.enumerations.ontologyrepresentationstyle.OntologyRepresentationStyle

      

   .. py:attribute:: model_config

      

   .. py:method:: ensure_non_empty(checked_list)
      :classmethod:

      Validates that the provided list does not contain empty strings.

      :param checked_list: The list to be validated.
      :type checked_list: set[str]
      :return: The validated list.
      :rtype: set[str]
      :raises ValueError: If any element in the list is an empty string.


   .. py:method:: add_element(element)

      Add an OntoumlElement to the project.

      Ensures that the element is of the correct type and not a Project itself. Also updates the inverse relationship
      in OntoumlElement and checks for duplicates.

      :param element: The OntoumlElement to be added to the project.
      :type element: OntoumlElement
      :raises TypeError: If the element is not an instance of OntoumlElement.


   .. py:method:: remove_element(element)

      Remove an OntoumlElement from the project if it exists.

      Also updates the inverse relationship in OntoumlElement.

      :param element: The OntoumlElement to be removed from the project.
      :type element: OntoumlElement
      :raises TypeError: If the element is not a valid OntoumlElement.



